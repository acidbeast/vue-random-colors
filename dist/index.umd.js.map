{"version":3,"file":"index.umd.js","sources":["../src/random-color.js","../src/index.js"],"sourcesContent":["const propertyMap = {\n  color: 'color',\n  background: 'backgroundColor',\n  border: 'borderColor'\n}\n\n\nconst transitionMap = {\n  color: 'color',\n  background: 'background-color',\n  border: 'border-color'\n}\n\n\nconst defaults = {\n  property: 'background',\n  event: 'mouseover',\n  default: 'ffffff',\n  transition: null\n}\n\n\nexport const random = function (count) {\n  return Math.floor(Math.random() * Math.floor(count))\n}\n\n\nexport const randomColor = function () {\n  const safeColorParts = ['00','33','66','99','cc','ff'];\n  const count = safeColorParts.length;\n  return safeColorParts[random(count)] + safeColorParts[random(count)] + safeColorParts[random(count)];\n}\n\n\nexport const getColor = function (defaultColor, colors) {\n  var color = colors ? colors[random(colors.length)] : randomColor();\n  var colorOut = defaultColor ? defaultColor : color;\n  return '#' + colorOut;\n}\n\n\nexport const checkValue = function (prop, values) {\n  return values && values[prop] ? values[prop] : defaults[prop];\n}\n\n\nexport const processValues = function (values) {\n  var output = {\n    propertyName: checkValue('property', values),\n    eventName: checkValue('event', values),\n    defaultColor: checkValue('default', values),\n    transition: checkValue('transition', values)\n  }\n  if (values && values.colors && Array.isArray(values.colors) && values.colors.length > 0) {\n    output.colors = values.colors;\n  }\n  return output;\n}\n\n\nexport default {\n  bind: function (element, context) {\n    var { propertyName, eventName, colors, defaultColor, transition } = processValues(context.value);\n    var eventHandler = function (defaultColor) {\n      return function () {\n        element.style[propertyMap[propertyName]] = getColor(defaultColor, colors);\n      }\n    }\n    if (transition) {\n      element.style.transition = transitionMap[propertyName] + ' ' + transition + 's';\n    }\n    element.addEventListener(eventName, eventHandler());\n    if (eventName == 'mouseover') {\n      element.addEventListener('mouseout', eventHandler(defaultColor));\n    }\n    if (eventName == 'mouseenter') {\n      element.addEventListener('mouseleave', eventHandler(defaultColor));\n    }\n  }\n}\n","import directive from './random-color'\n\n\nconst plugin = {\n  install(Vue) {\n    Vue.directive('random-color', directive)\n  },\n  directive,\n}\n\n\nexport default plugin\n"],"names":["const","propertyMap","color","background","border","transitionMap","defaults","property","event","default","transition","random","count","Math","floor","checkValue","prop","values","bind","element","context","output","propertyName","value","eventName","defaultColor","colors","Array","isArray","length","eventHandler","style","safeColorParts","getColor","addEventListener","install","Vue","directive"],"mappings":"oKAAAA,IAAMC,EAAc,CAClBC,MAAO,QACPC,WAAY,kBACZC,OAAQ,eAIJC,EAAgB,CACpBH,MAAO,QACPC,WAAY,mBACZC,OAAQ,gBAIJE,EAAW,CACfC,SAAU,aACVC,MAAO,YACPC,QAAS,SACTC,WAAY,MAIDC,EAAS,SAAUC,UACvBC,KAAKC,MAAMD,KAAKF,SAAWE,KAAKC,MAAMF,KAkBlCG,EAAa,SAAUC,EAAMC,UACjCA,GAAUA,EAAOD,GAAQC,EAAOD,GAAQV,EAASU,MAkB3C,CACbE,KAAM,SAAUC,EAASC,OAfYH,EACjCI,KAAAA,EAAS,CACXC,aAAcP,EAAW,WAFUE,EAgB+CG,EAAQG,OAb1FC,UAAWT,EAAW,QAASE,GAC/BQ,aAAcV,EAAW,UAAWE,GACpCP,WAAYK,EAAW,aAAcE,IAEnCA,GAAUA,EAAOS,QAAUC,MAAMC,QAAQX,EAAOS,SAAWT,EAAOS,OAAOG,OAAS,IACpFR,EAAOK,OAAST,EAAOS,QAElBL,6EAODS,EAAe,SAAUL,UACpB,WACLN,EAAQY,MAAM9B,EAAYqB,IA/BV,SAAUG,EAAcC,OANxCM,EACApB,EAMFV,EAAQwB,EAASA,EAAOf,EAAOe,EAAOG,UAPpCG,EAAiB,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,OAE3BrB,EADhBC,EAAQoB,EAAeH,SACUG,EAAerB,EAAOC,IAAUoB,EAAerB,EAAOC,UAOtF,KADQa,GAA8BvB,GA6BI+B,CAASR,EAAcC,KAGlEhB,IACFS,EAAQY,MAAMrB,WAAaL,EAAciB,GAAgB,IAAMZ,EAAa,KAE9ES,EAAQe,iBAAiBV,EAAWM,KACnB,aAAbN,GACFL,EAAQe,iBAAiB,WAAYJ,EAAaL,IAEnC,cAAbD,GACFL,EAAQe,iBAAiB,aAAcJ,EAAaL,YCzE3C,CACbU,iBAAQC,GACNA,EAAIC,UAAU,eAAgBA,cAEhCA"}